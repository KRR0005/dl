import numpy as np
def initialize_weights_and_threshold(num_features):
    weights = np.random.rand(num_features + 1)
    threshold = 0
    return weights, threshold
def perceptron_train(inputs, targets, weights, threshold, learning_rate, max_iterations=1000):
    converged = False
    num_iterations = 0   
    while not converged and num_iterations < max_iterations:
        num_iterations += 1
        converged = True      
        for input_data, target in zip(inputs, targets):
            input_data_with_bias = np.insert(input_data, 0, 1)          
            weighted_sum = np.dot(weights, input_data_with_bias)           
            output = 1 if weighted_sum > threshold else 0           
            if output != target:
                converged = False
                weights += learning_rate * (target - output) * input_data_with_bias       
            print(f"Input: {input_data_with_bias}, Weighted Sum: {weighted_sum}")         
    return weights, num_iterations
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
targets = np.array([0, 0, 0, 1])
num_features = len(inputs[0])
weights, threshold = initialize_weights_and_threshold(num_features)
learning_rate = 0.1
trained_weights, num_iterations = perceptron_train(inputs, targets, weights, threshold, learning_rate)
print(f"Converged in {num_iterations} iterations")
print("Trained Weights:", trained_weights)
